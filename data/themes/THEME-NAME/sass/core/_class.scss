@charset "UTF-8";

@use "../global" as *;

$flex-direction: (
  fd--row: row,
  fd--column: column,
  fd--rowreverse: row-reverse,
  fd--columnreverse: column-reverse,
);
$flex-wrap: (
  fw--nowrap: nowrap,
  fw--wrap: wrap,
  fw--wrapreverse: wrap-reverse,
);
$justify-content: (
  jc--start: flex-start,
  jc--end: flex-end,
  jc--center: center,
  jc--between: space-between,
  jc--around: space-around,
  jc--evenly: space-evenly,
  jc--stretch: stretch,
);
$align-items: (
  ai--start: flex-start,
  ai--end: flex-end,
  ai--center: center,
  ai--stretch: stretch,
);

// 余白クラスの生成
@include spaceloop();

// 行揃え指定クラス
@include textalign();

// フォントサイズクラス作成
@include fontsize();

// lineheightのクラス
@include lineheight();

// letterspacingのクラス
@include letterspacing();

// font-weightのクラス
@include fontweight();

// クリアフィックス
.clearfix {
  @include clearfix;
}

// ポジションクラス
.relative {
  position: relative !important;
}

// pタグ同士の間の余白用クラス
.mt1em {
  margin-top: 1em;
}

.mb1em {
  margin-bottom: 1em;
}

// 幅設定クラス
.mw100 {
  max-width: 100% !important;
}

.w100 {
  width: 100% !important;
}

// 画像のフェード用クラス
.fade {
  transition: opacity 0.2s;
  opacity: 1;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;

  &:hover {
    opacity: 0.7;
  }
}

// 画像の角丸用クラス
@for $i from 1 through 15 {
  $size: $i * 2;
  .bdrs#{$size} {
    overflow: hidden;
    border-radius: #{$size}px;
  }
}

// 画像のtb時幅設定クラス
@media only screen and (max-width: $screen-tb) {
  @for $i from 8 through 12 {
    $size: $i * 50;
    .img-tb#{$size} {
      max-width: #{$size}px;
      margin-inline: auto;
    }
  }
}

// flex時gap設定クラス
@for $i from 1 through 50 {
  .gap#{$i} {
    gap: #{$i}px;
  }
}
@media only screen and (max-width: $screen-tb) {
  @for $i from 1 through 50 {
    .gap#{$i}-tb {
      gap: #{$i}px;
    }
  }
}

.left-box {
  float: left !important;
}

.right-box {
  float: right !important;
}

.center-box {
  margin-left: auto !important;
  margin-right: auto !important;
}

// フォント太さクラス
.normal {
  font-weight: normal;
}

.bold {
  font-weight: bold;
}

@if $responsive {
  @media only screen and (max-width: $screen-tb) {
    // 行揃え指定クラス
    @include textalign(-tb);

    // タブレット用余白クラスの生成
    @include spaceloop(-tb);

    // タブレット用フォントサイズクラスの生成
    @include fontsize(-tb);

    // タブレット用lineheightのクラス
    @include lineheight(-tb);

    // タブレット用letterspacingのクラス
    @include letterspacing(-tb);
  }

  @media only screen and (max-width: $screen-sp) {
    // 行揃え指定クラス
    @include textalign(-sp);

    // スマホ用余白クラスの生成
    @include spaceloop(-sp);

    // スマホ用フォントサイズクラスの生成
    @include fontsize(-sp);

    // スマホ用lineheightのクラス
    @include lineheight(-sp);

    // スマホ用letterspacingのクラス
    @include letterspacing(-sp);
  }

  // デバイスごとのディスプレイ指定クラス
  .pc {
    @media only screen and (max-width: $screen-tb) {
      display: none !important;
    }
  }

  .pctb {
    @media only screen and (max-width: $screen-sp) {
      display: none !important;
    }
  }

  .tb {
    @media only screen and (min-width: $screen-pc-min) {
      display: none !important;
    }
  }

  .sp {
    @media only screen and (min-width: $screen-tb-min) {
      display: none !important;
    }
  }
}

//フレックス
.flex {
  @include flex(row, wrap, space-between, flex-start);

  &.-center {
    align-items: center;
  }

  &.-reverse {
    flex-direction: row-reverse;
  }

  @media only screen and (max-width: $screen-tb) {
    .flex-item {
      width: 100% !important;
    }
  }
}

@each $class, $value in $flex-direction {
  .#{$class} {
    @include f-direction($value);
  }
}

@each $class, $value in $flex-wrap {
  .#{$class} {
    @include f-wrap($value);
  }
}

@each $class, $value in $justify-content {
  .#{$class} {
    @include j-content($value);
  }
}

@each $class, $value in $align-items {
  .#{$class} {
    @include a-items($value);
  }
}

@if $responsive {
  @media only screen and (max-width: $screen-tb) {
    @each $class, $value in $flex-direction {
      .#{$class}-tb {
        @include f-direction($value);
      }
    }

    @each $class, $value in $flex-wrap {
      .#{$class}-tb {
        @include f-wrap($value);
      }
    }

    @each $class, $value in $justify-content {
      .#{$class}-tb {
        @include j-content($value);
      }
    }

    @each $class, $value in $align-items {
      .#{$class}-tb {
        @include a-items($value);
      }
    }
  }

  @media only screen and (max-width: $screen-sp) {
    @each $class, $value in $flex-direction {
      .#{$class}-sp {
        @include f-direction($value);
      }
    }

    @each $class, $value in $flex-wrap {
      .#{$class}-sp {
        @include f-wrap($value);
      }
    }

    @each $class, $value in $justify-content {
      .#{$class}-sp {
        @include j-content($value);
      }
    }

    @each $class, $value in $align-items {
      .#{$class}-sp {
        @include a-items($value);
      }
    }
  }
}

@include owl();

@if $responsive {
  @media only screen and (max-width: $screen-tb) {
    @include owl(-tb);
  }

  @media only screen and (max-width: $screen-sp) {
    @include owl(-sp);
  }
}

@include row-owl();

@if $responsive {
  @media only screen and (max-width: $screen-tb) {
    @include row-owl(-tb);
  }

  @media only screen and (max-width: $screen-sp) {
    @include row-owl(-sp);
  }
}
